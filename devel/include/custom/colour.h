// Generated by gencpp from file custom/colour.msg
// DO NOT EDIT!


#ifndef CUSTOM_MESSAGE_COLOUR_H
#define CUSTOM_MESSAGE_COLOUR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom
{
template <class ContainerAllocator>
struct colour_
{
  typedef colour_<ContainerAllocator> Type;

  colour_()
    : r(0)
    , g(0)
    , b(0)
    , a(0)
    , name()  {
    }
  colour_(const ContainerAllocator& _alloc)
    : r(0)
    , g(0)
    , b(0)
    , a(0)
    , name(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _r_type;
  _r_type r;

   typedef int64_t _g_type;
  _g_type g;

   typedef int64_t _b_type;
  _b_type b;

   typedef int64_t _a_type;
  _a_type a;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;





  typedef boost::shared_ptr< ::custom::colour_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom::colour_<ContainerAllocator> const> ConstPtr;

}; // struct colour_

typedef ::custom::colour_<std::allocator<void> > colour;

typedef boost::shared_ptr< ::custom::colour > colourPtr;
typedef boost::shared_ptr< ::custom::colour const> colourConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom::colour_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom::colour_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom::colour_<ContainerAllocator1> & lhs, const ::custom::colour_<ContainerAllocator2> & rhs)
{
  return lhs.r == rhs.r &&
    lhs.g == rhs.g &&
    lhs.b == rhs.b &&
    lhs.a == rhs.a &&
    lhs.name == rhs.name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom::colour_<ContainerAllocator1> & lhs, const ::custom::colour_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom::colour_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom::colour_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom::colour_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom::colour_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom::colour_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom::colour_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom::colour_<ContainerAllocator> >
{
  static const char* value()
  {
    return "348ffe1626e833387879188565686257";
  }

  static const char* value(const ::custom::colour_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x348ffe1626e83338ULL;
  static const uint64_t static_value2 = 0x7879188565686257ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom::colour_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom/colour";
  }

  static const char* value(const ::custom::colour_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom::colour_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 r\n"
"int64 g\n"
"int64 b\n"
"int64 a\n"
"string name\n"
;
  }

  static const char* value(const ::custom::colour_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom::colour_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.r);
      stream.next(m.g);
      stream.next(m.b);
      stream.next(m.a);
      stream.next(m.name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct colour_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom::colour_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom::colour_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "r: ";
    Printer<int64_t>::stream(s, indent + "  ", v.r);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "g: ";
    Printer<int64_t>::stream(s, indent + "  ", v.g);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "b: ";
    Printer<int64_t>::stream(s, indent + "  ", v.b);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "a: ";
    Printer<int64_t>::stream(s, indent + "  ", v.a);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MESSAGE_COLOUR_H
